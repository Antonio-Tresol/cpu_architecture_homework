import pytest
import riscv32_im_assembler as assembler


@pytest.mark.parametrize(
    "instruction, expected_encoding",
    [
        ("addi x5, x5, 1", "000000000001 00101 000 00101 0010011"),
        ("add x10, x5, x6", "0000000 00110 00101 000 01010 0110011"),
        ("sw x11, 4(x10)", "0000000 01011 01010 010 00100 0100011"),
        ("lw x11, 4(x10)", "000000000100 01010 010 01011 0000011"),
        ("lui x1, 524288", "10000000000000000000 00001 0110111"),
        ("beq x4, x5, 0", "0 000000 00101 00100 000 00000 1100011"),
        ("jal x1, 2", "0 0000000001 0 00000000 00001 1101111"),
        ("lui x1, -3", "11111111111111111101 00001 0110111"),
        ("auipc x1, 3", "00000000000000000011 00001 0010111"),
        ("jalr x1, 4(x2)", "000000000100 00010 000 00001 1100111"),
        ("bne x1, x2, 4", "0 000000 00010 00001 001 00100 1100011"),
        ("blt x1, x2, -4", "1 111111 00010 00001 100 11101 1100011"),
        ("bge x1, x2, 4", "0 000000 00010 00001 101 00100 1100011"),
        ("bltu x1, x2, 4", "0 000000 00010 00001 110 00100 1100011"),
        ("bgeu x1, x2, 4", "0 000000 00010 00001 111 00100 1100011"),
        ("lb x1, -1(x2)", "111111111111 00010 000 00001 0000011"),
        ("lh x1, -1(x3)", "111111111111 00011 001 00001 0000011"),
        ("lw x1, 10(fp)", "000000001010 01000 010 00001 0000011"),
        ("lbu x1, 0(x2)", "000000000000 00010 100 00001 0000011"),
        ("lhu x1, 0(x2)", "000000000000 00010 101 00001 0000011"),
        ("sb x1, 0(x2)", "0000000 00001 00010 000 00000 0100011"),
        ("sh x1, 0(x2)", "0000000 00001 00010 001 00000 0100011"),
        ("sw x1, 0(x2)", "0000000 00001 00010 010 00000 0100011"),
        ("slti x1, x2, 1", "000000000001 00010 010 00001 0010011"),
        ("sltiu x1, x2, 2", "000000000010 00010 011 00001 0010011"),
        ("xori x1, x2, -1", "111111111111 00010 100 00001 0010011"),
        ("ori x1, x2, 7", "000000000111 00010 110 00001 0010011"),
        ("andi x1, x2, 1", "000000000001 00010 111 00001 0010011"),
        ("slli x1, x2, 1", "000000000001 00010 001 00001 0010011"),
        ("srli x1, x2, 1", "000000000001 00010 101 00001 0010011"),
        ("srai x1, x2, -1", "111111111111 00010 101 00001 0010011"),
        ("sub x1, x2, x3", "0100000 00011 00010 000 00001 0110011"),
        ("sll x1, x2, x3", "0000000 00011 00010 001 00001 0110011"),
        ("slt x1, x2, x3", "0000000 00011 00010 010 00001 0110011"),
        ("sltu x1, x2, x3", "0000000 00011 00010 011 00001 0110011"),
        ("xor x1, x2, x3", "0000000 00011 00010 100 00001 0110011"),
        ("srl x1, x2, x3", "0000000 00011 00010 101 00001 0110011"),
        ("sra x1, x2, x3", "0100000 00011 00010 101 00001 0110011"),
        ("or x1, x2, x3", "0000000 00011 00010 110 00001 0110011"),
        ("and x1, x2, x3", "0000000 00011 00010 111 00001 0110011"),
        ("mul x1, x2, x3", "0000001 00011 00010 000 00001 0110011"),
        ("mulh x4, x5, x6", "0000001 00110 00101 001 00100 0110011"),
        ("mulhsu x7, x8, x9", "0000001 01001 01000 010 00111 0110011"),
        ("mulhu x10, x11, x12", "0000001 01100 01011 011 01010 0110011"),
        ("div x13, x14, x15", "0000001 01111 01110 100 01101 0110011"),
        ("divu x16, x17, x18", "0000001 10010 10001 101 10000 0110011"),
        ("rem x19, x20, x21", "0000001 10101 10100 110 10011 0110011"),
        ("remu x22, x23, x24", "0000001 11000 10111 111 10110 0110011"),
    ],
)
def test_binary_encode_rv32i_line(instruction, expected_encoding):
    assert (
        assembler.binary_encode_rv32i_line(instruction, readable=True)
        == expected_encoding
    )


def test_int_to_binary():
    assert assembler.int_to_binary(1) == "000000000001"
    assert assembler.int_to_binary(1) == "000000000001"
    assert assembler.int_to_binary(-1) == "111111111111"
    assert assembler.int_to_binary(2048) == "100000000000"


def test_get_rs1_from_offset():
    assert assembler.get_rs1_from_offset(parts=["sw", "x11", "4(x10)"]) == "x10"


def test_get_immediate_from_offset():
    assert assembler.get_immediate_from_offset(parts=["sw", "x11", "4(x10)"]) == "4"
